# Set the working directory
setwd("D:\\DS\\JLT")
# install.packages("rmarkdown")
# install.packages("excel.link")
# install.packages("tidyverse")
# install.packages("ggcorrplot")
# install.packages("plotly")
library(tidyverse)
library(ggcorrplot)
library(plotly)
# Loading the data
wb2<- "WC_Data_Science Case Study.csv"
compensations <- read.csv(wb2)
compensations_bkp <- read.csv(wb2)
View(compensations)
# Data cleaning
#1. Missing values
summary(compensations$Date.of.Birth)
table(is.na(compensations$Date.of.Birth))
head(compensations)
# Blank values instead of NA so reload with NA, Commas and hyphen in claim amount
# Now read with NA
compensationsWithNA <- read.csv(wb2,header = T, na.strings = c("","NA"))
# Remove the commans and hyphen from claim amount
compensationsWithNA$Claim.Cost <- as.numeric(gsub("[,-]","",compensationsWithNA$Claim.Cost))
# Backup for compensations with NA
compensationsWithNA_bkp <- compensationsWithNA
head(compensationsWithNA) # Now the values with NA and no hyphen or comma in cost
table(is.na(compensationsWithNA$Date.of.Birth))
na_count <-sapply(compensationsWithNA, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count)
# While I check the data frame na_count then it is noticed that some of the values have exactly 9 NA's which is bit odd
# so I checked the lower and upper values
head(compensationsWithNA)
tail(compensationsWithNA)
# So it seems like the ending values are nothing just NAs so let's remove last 9 records from table
n<-dim(compensationsWithNA)[1]
compensationsWithNA<-compensationsWithNA[1:(n-9),]
# Recheck the na's
na_count <-sapply(compensationsWithNA, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count)
na_count$percent <- (na_count$na_count/n)*100
na_count
table(is.na(compensationsWithNA$Claim.Cost),compensationsWithNA$High.Cost)
mean(compensationsWithNA$Claim.Cost, na.rm = T)
mode(compensationsWithNA$Claim.Cost)
# Let's replace all the cost values with mean
compensationsWithNA$Claim.Cost[is.na(compensationsWithNA$Claim.Cost)] <- mean(compensationsWithNA$Claim.Cost, na.rm = T)
# Backup of data till now
compensationsWithNA_bkp2 <- compensationsWithNA
unique(compensationsWithNA$Litigation)
# The values in variable Litigatation are No, NO, Yes, YES
compensationsWithNA$Litigation <- toupper(compensationsWithNA$Litigation)
gg <- ggplot(data=compensations) +
geom_bar(mapping =aes(x=compensations$Carrier),
position = "dodge")
plot(gg)
ggploty(gg)
ggplotly(gg)
gg <- ggplot(data=compensationsWithNA) +
geom_bar(mapping =aes(x=compensationsWithNA$Litigation, fill=compensationsWithNA$Sector.Industry),
position = "dodge")
ggplotly(gg)
# The graph says that for Communication services, Aviation and Consumer disc, the litigation is blank always
# but considering the % of NO, it can be filled as NO for all.
table(compensationsWithNA$Litigation)
table(compensationsWithNA$Litigation,compensationsWithNA$High.Cost)
gg <- ggplot(data=compensationsWithNA) +
geom_bar(mapping =aes(x=compensationsWithNA$High.Cost, fill=compensationsWithNA$Litigation),
position = "dodge")
ggplotly(gg)
# Let's replace all missing values in litigation as no
compensationsWithNA$Litigation[is.na(compensationsWithNA$Litigation)] <- 'NO'
# Carrier has 86% NA's which we can ignore
# Occupation has 71% NA's which we can ignore
# DOB has 75% NA's but can be ignored
# Closed date can be empty as ticket status can still be open
# Accident state has 15% NA but as of now we can ignore
table(compensationsWithNA$Occupation)
unique(compensationsWithNA$Occupation)
# Let's check for outliers in claim cost
ggplot(data = male, aes(x = "", y = male)) +
geom_boxplot() +
coord_cartesian(ylim = c(0, 150))
# Let's check for outliers in claim cost
ggplot(data = compensationsWithNA, aes(x = compensationsWithNA$Sector.Industry, y = Claim.Cost)) +
geom_boxplot() +
coord_cartesian(ylim = c(0, 150))
ggplotly(gg)
# Let's check for outliers in claim cost
gg <- ggplot(data = compensationsWithNA, aes(x = compensationsWithNA$Sector.Industry, y = Claim.Cost)) +
geom_boxplot() +
coord_cartesian(ylim = c(0, 150))
ggplotly(gg)
# Let's check for outliers in claim cost
gg <- ggplot(data = compensationsWithNA, aes(x = compensationsWithNA$Sector.Industry, y = Claim.Cost)) +
geom_boxplot() +
coord_cartesian(ylim = c(min(Claim.Cost),max(Claim.Cost)))
# Let's check for outliers in claim cost
gg <- ggplot(data = compensationsWithNA, aes(x = compensationsWithNA$Sector.Industry, y = Claim.Cost)) +
geom_boxplot() +
coord_cartesian(ylim = c(min(Claim.Cost),max(Claim.Cost)))
# Let's check for outliers in claim cost
gg <- ggplot(data = compensationsWithNA, aes(x = compensationsWithNA$Sector.Industry, y = Claim.Cost)) +
geom_boxplot() +
coord_cartesian(ylim = c(min(compensationsWithNA$Claim.Cost),max(compensationsWithNA$Claim.Cost)))
ggplotly(gg)
# Here we have more categorical variables and less continuous variables, so we do the
# bivariate analysis using two way table
# 1. Litigation vs High Cost
barplot(table(compensationsWithNA$Litigation, compensationsWithNA$High.Cost))
# Here we have more categorical variables and less continuous variables, so we do the
# bivariate analysis using two way table
# 1. Litigation vs High Cost
barplot(table(compensationsWithNA$Litigation, compensationsWithNA$High.Cost), beside = T)
prop.test(table(compensationsWithNA$Litigation, compensationsWithNA$High.Cost))
# Here we have more categorical variables and less continuous variables, so we do the
# bivariate analysis using two way table
# 1. Litigation vs High Cost
barplot(table(compensationsWithNA$Litigation, compensationsWithNA$Claim.Cost), beside = T)
prop.test(table(compensationsWithNA$Litigation, compensationsWithNA$Claim.Cost))
# install.packages("rmarkdown")
# install.packages("excel.link")
# install.packages("tidyverse")
# install.packages("ggcorrplot")
# install.packages("plotly")
install.packages("psych")
library(psych)
z <- sqrt(9720.8)
z
phi(table(compensationsWithNA$Litigation, compensationsWithNA$High.Cost),digits = 3)
# 1. Loss Type vs High Cost
barplot(table(compensationsWithNA$Loss.Type, compensationsWithNA$High.Cost), beside = T)
# Here we have more categorical variables and less continuous variables, so we do the
# bivariate analysis using two way table
# 1. Litigation vs High Cost
gg <- ggplot(data=compensationsWithNA) +
geom_bar(mapping =aes(x=compensationsWithNA$High.Cost, fill=compensationsWithNA$Litigation),
position = "dodge")
ggplotly(gg)
# 2. Loss Type vs High Cost
gg <- ggplot(data=compensationsWithNA) +
geom_bar(mapping =aes(x=compensationsWithNA$High.Cost, fill=compensationsWithNA$Loss.Type),
position = "dodge")
ggplotly(gg)
prop.test(table(compensationsWithNA$Loss.Type, compensationsWithNA$High.Cost))
z <- sqrt(4659.2)
z
phi(table(compensationsWithNA$Loss.Type, compensationsWithNA$High.Cost),digits = 3)
?prop.test
# 3. Accident State vs High Cost
gg <- ggplot(data=compensationsWithNA) +
geom_bar(mapping =aes(x=compensationsWithNA$High.Cost, fill=compensationsWithNA$Accident.State),
position = "dodge")
ggplotly(gg)
prop.test(table(compensationsWithNA$Accident.State, compensationsWithNA$High.Cost))
# 4. Sectory/Industry vs High Cost
gg <- ggplot(data=compensationsWithNA) +
geom_bar(mapping =aes(x=compensationsWithNA$Sector.Industry, fill=compensationsWithNA$Loss.Type),
position = "dodge")
prop.test(table(compensationsWithNA$Sector.Industry, compensationsWithNA$High.Cost))
ggplotly(gg)
# 3. Accident State vs High Cost
gg <- ggplot(data=compensationsWithNA) +
geom_bar(mapping =aes(x=compensationsWithNA$High.Cost, fill=compensationsWithNA$Accident.State),
position = "dodge")
ggplotly(gg)
# 4. Sectory/Industry vs High Cost
gg <- ggplot(data=compensationsWithNA) +
geom_bar(mapping =aes(x=compensationsWithNA$Sector.Industry, fill=compensationsWithNA$High.Cost),
position = "dodge")
ggplotly(gg)
# 4. Sectory/Industry vs High Cost
gg <- ggplot(data=compensationsWithNA) +
geom_bar(mapping =aes(x=compensationsWithNA$High.Cost, fill=compensationsWithNA$Sector.Industry),
position = "dodge")
ggplotly(gg)
prop.test(table(compensationsWithNA$Sector.Industry, compensationsWithNA$High.Cost))
# create backup again
compensationsWithNA_bkp3 <- compensationsWithNA
# sample the data for modelling
# 75% of the sample size
smp_size <- floor(0.75 * nrow(compensationsWithNA))
smp_size
# set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(compensationsWithNA)), size = smp_size)
train <- compensationsWithNA[train_ind, ]
test <- compensationsWithNA[-train_ind, ]
train
test
# Check if the train and test sets are fine
prop.table(table(train$High.Cost))
prop.table(table(test$High.Cost))
# install.packages("rmarkdown")
# install.packages("excel.link")
# install.packages("tidyverse")
# install.packages("ggcorrplot")
# install.packages("plotly")
# install.packages("psych")
install.packages("rpart.plot")
library(rpart.plot)
fit <- rpart(train$High.Cost~., data = train, method = 'class')
rpart.plot(fit, extra = 106)
fit <- rpart(train$High.Cost~c(train$Loss.Type,train$Claim.Cost), data = train, method = 'class')
fit <- rpart(train$High.Cost~c(train$Loss.Type+train$Claim.Cost), data = train, method = 'class')
# install.packages("rmarkdown")
# install.packages("excel.link")
# install.packages("tidyverse")
# install.packages("ggcorrplot")
# install.packages("plotly")
# install.packages("psych")
# install.packages("rpart.plot")
install.packages(party)
# install.packages("rmarkdown")
# install.packages("excel.link")
# install.packages("tidyverse")
# install.packages("ggcorrplot")
# install.packages("plotly")
# install.packages("psych")
# install.packages("rpart.plot")
install.packages("party")
library(party)
# Create the tree.
output.tree <- ctree(
train$High.Cost ~ train$Litigation + train$Sector.Industry + train$Loss.Type,
data = train)
library(randomForest)
# install.packages("rmarkdown")
# install.packages("excel.link")
# install.packages("tidyverse")
# install.packages("ggcorrplot")
# install.packages("plotly")
# install.packages("psych")
# install.packages("rpart.plot")
install.packages("randomForest")
library(randomForest)
# model fit
# note that you must turn the ordinal variables into factor or R wont use
# them properly
model <- randomForest(y=as.factor(train$High.Cost),x=cbind(train$Loss.Type,train$Litigation,train$Sector.Industry,ntree=10)
)
# model fit
# note that you must turn the ordinal variables into factor or R wont use
# them properly
model <- randomForest(y=as.factor(train$High.Cost),x=cbind(train$Loss.Type,train$Litigation,train$Sector.Industry),ntree=10)
#plot of model accuracy by class
plot(model)
compensationsWithNA$High.Cost[is.na(compensationsWithNA$High.Cost)]
# model fit
# note that you must turn the ordinal variables into factor or R wont use
# them properly
model <- randomForest(y=as.factor(train$High.Cost),x=train$Sector.Industry,ntree=10)
cbind(train$Loss.Type,train$Litigation,train$Sector.Industry)
cbind(as.factor(train$Loss.Type),as.factor(train$Litigation),as.factor(train$Sector.Industry))
# model fit
# note that you must turn the ordinal variables into factor or R wont use
# them properly
model <- randomForest(y=train$High.Cost,x=cbind(as.factor(train$Loss.Type),as.factor(train$Litigation),as.factor(train$Sector.Industry)),ntree=10)
#plot of model accuracy by class
plot(model)
# model fit
# note that you must turn the ordinal variables into factor or R wont use
# them properly
model <- randomForest(y=train$High.Cost,x=cbind(as.factor(train$Loss.Type),as.factor(train$Litigation),as.factor(train$Sector.Industry)),ntree=100)
#plot of model accuracy by class
plot(model)
model <- randomForest(y=train$High.Cost,x=as.factor(train$Sector.Industry),ntree=100)
#plot of model accuracy by class
plot(model)
model <- randomForest(y=train$High.Cost,x=as.factor(train$Sector.Industry),ntree=100)
#plot of model accuracy by class
plot(model)
model <- randomForest(y=train$High.Cost,x=as.factor(train$Litigation),ntree=100)
#plot of model accuracy by class
plot(model)
model <- randomForest(y=train$High.Cost,x=train$Claim.Cost,ntree=100)
#plot of model accuracy by class
plot(model)
model <- randomForest(y=train$High.Cost,x=train$Claim.Cost,ntree=1000)
#plot of model accuracy by class
plot(model)
compensationsWithNA[,c(1,2,5,11,14)]
compensationsWithNA <- compensationsWithNA[,c(1,2,5,11,14,16)]
# sample the data for modelling
# 75% of the sample size
smp_size <- floor(0.75 * nrow(compensationsWithNA))
# set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(compensationsWithNA)), size = smp_size)
train <- compensationsWithNA[train_ind, ]
test <- compensationsWithNA[-train_ind, ]
# Check if the train and test sets are fine
prop.table(table(train$High.Cost))
prop.table(table(test$High.Cost))
fit <- rpart(train$High.Cost~., data = train, method = 'class')
rpart.plot(fit, extra = 106)
fit
PRE_TDT=predict(fit,data=train,type="class")
confusionMatrix(PRE_TDT,train$High.Cost)
?confusionMatrix
??confusionMatrix
install.packages("caret")
library(caret)
confusionMatrix(PRE_TDT,train$High.Cost)
PRE_TDT=predict(fit,data=train,type="class")
PRE_TDT
PRE_TDT=predict(fit,data=test,type="class")
PRE_TDT
confusionMatrix(PRE_TDT,test$High.Cost)
rpart.plot(fit, extra = 3)
confusionMatrix(PRE_TDT,train$High.Cost)
# rpart.plot(fit, extra = 3)
PRE_TDT=predict(fit,data=train,type="class")
# rpart.plot(fit, extra = 3)
PRE_TDT=predict(fit,data=train,type="class")
)
)
